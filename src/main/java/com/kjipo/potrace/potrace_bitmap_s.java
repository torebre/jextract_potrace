// Generated by jextract

package com.kjipo.potrace;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct potrace_bitmap_s {
 *     int w;
 *     int h;
 *     int dy;
 *     potrace_word *map;
 * }
 * }
 */
public class potrace_bitmap_s {

    potrace_bitmap_s() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        potracelib_h.C_INT.withName("w"),
        potracelib_h.C_INT.withName("h"),
        potracelib_h.C_INT.withName("dy"),
        MemoryLayout.paddingLayout(4),
        potracelib_h.C_POINTER.withName("map")
    ).withName("potrace_bitmap_s");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt w$LAYOUT = (OfInt)$LAYOUT.select(groupElement("w"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int w
     * }
     */
    public static final OfInt w$layout() {
        return w$LAYOUT;
    }

    private static final long w$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int w
     * }
     */
    public static final long w$offset() {
        return w$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int w
     * }
     */
    public static int w(MemorySegment struct) {
        return struct.get(w$LAYOUT, w$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int w
     * }
     */
    public static void w(MemorySegment struct, int fieldValue) {
        struct.set(w$LAYOUT, w$OFFSET, fieldValue);
    }

    private static final OfInt h$LAYOUT = (OfInt)$LAYOUT.select(groupElement("h"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int h
     * }
     */
    public static final OfInt h$layout() {
        return h$LAYOUT;
    }

    private static final long h$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int h
     * }
     */
    public static final long h$offset() {
        return h$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int h
     * }
     */
    public static int h(MemorySegment struct) {
        return struct.get(h$LAYOUT, h$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int h
     * }
     */
    public static void h(MemorySegment struct, int fieldValue) {
        struct.set(h$LAYOUT, h$OFFSET, fieldValue);
    }

    private static final OfInt dy$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int dy
     * }
     */
    public static final OfInt dy$layout() {
        return dy$LAYOUT;
    }

    private static final long dy$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int dy
     * }
     */
    public static final long dy$offset() {
        return dy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int dy
     * }
     */
    public static int dy(MemorySegment struct) {
        return struct.get(dy$LAYOUT, dy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int dy
     * }
     */
    public static void dy(MemorySegment struct, int fieldValue) {
        struct.set(dy$LAYOUT, dy$OFFSET, fieldValue);
    }

    private static final AddressLayout map$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("map"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * potrace_word *map
     * }
     */
    public static final AddressLayout map$layout() {
        return map$LAYOUT;
    }

    private static final long map$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * potrace_word *map
     * }
     */
    public static final long map$offset() {
        return map$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * potrace_word *map
     * }
     */
    public static MemorySegment map(MemorySegment struct) {
        return struct.get(map$LAYOUT, map$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * potrace_word *map
     * }
     */
    public static void map(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(map$LAYOUT, map$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

