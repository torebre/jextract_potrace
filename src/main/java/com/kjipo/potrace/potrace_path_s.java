// Generated by jextract

package com.kjipo.potrace;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct potrace_path_s {
 *     int area;
 *     int sign;
 *     potrace_curve_t curve;
 *     struct potrace_path_s *next;
 *     struct potrace_path_s *childlist;
 *     struct potrace_path_s *sibling;
 *     struct potrace_privpath_s *priv;
 * }
 * }
 */
public class potrace_path_s {

    potrace_path_s() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        potracelib_h.C_INT.withName("area"),
        potracelib_h.C_INT.withName("sign"),
        potrace_curve_s.layout().withName("curve"),
        potracelib_h.C_POINTER.withName("next"),
        potracelib_h.C_POINTER.withName("childlist"),
        potracelib_h.C_POINTER.withName("sibling"),
        potracelib_h.C_POINTER.withName("priv")
    ).withName("potrace_path_s");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt area$LAYOUT = (OfInt)$LAYOUT.select(groupElement("area"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int area
     * }
     */
    public static final OfInt area$layout() {
        return area$LAYOUT;
    }

    private static final long area$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int area
     * }
     */
    public static final long area$offset() {
        return area$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int area
     * }
     */
    public static int area(MemorySegment struct) {
        return struct.get(area$LAYOUT, area$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int area
     * }
     */
    public static void area(MemorySegment struct, int fieldValue) {
        struct.set(area$LAYOUT, area$OFFSET, fieldValue);
    }

    private static final OfInt sign$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sign"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int sign
     * }
     */
    public static final OfInt sign$layout() {
        return sign$LAYOUT;
    }

    private static final long sign$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int sign
     * }
     */
    public static final long sign$offset() {
        return sign$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int sign
     * }
     */
    public static int sign(MemorySegment struct) {
        return struct.get(sign$LAYOUT, sign$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int sign
     * }
     */
    public static void sign(MemorySegment struct, int fieldValue) {
        struct.set(sign$LAYOUT, sign$OFFSET, fieldValue);
    }

    private static final GroupLayout curve$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("curve"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * potrace_curve_t curve
     * }
     */
    public static final GroupLayout curve$layout() {
        return curve$LAYOUT;
    }

    private static final long curve$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * potrace_curve_t curve
     * }
     */
    public static final long curve$offset() {
        return curve$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * potrace_curve_t curve
     * }
     */
    public static MemorySegment curve(MemorySegment struct) {
        return struct.asSlice(curve$OFFSET, curve$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * potrace_curve_t curve
     * }
     */
    public static void curve(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, curve$OFFSET, curve$LAYOUT.byteSize());
    }

    private static final AddressLayout next$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("next"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct potrace_path_s *next
     * }
     */
    public static final AddressLayout next$layout() {
        return next$LAYOUT;
    }

    private static final long next$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct potrace_path_s *next
     * }
     */
    public static final long next$offset() {
        return next$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct potrace_path_s *next
     * }
     */
    public static MemorySegment next(MemorySegment struct) {
        return struct.get(next$LAYOUT, next$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct potrace_path_s *next
     * }
     */
    public static void next(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(next$LAYOUT, next$OFFSET, fieldValue);
    }

    private static final AddressLayout childlist$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("childlist"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct potrace_path_s *childlist
     * }
     */
    public static final AddressLayout childlist$layout() {
        return childlist$LAYOUT;
    }

    private static final long childlist$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct potrace_path_s *childlist
     * }
     */
    public static final long childlist$offset() {
        return childlist$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct potrace_path_s *childlist
     * }
     */
    public static MemorySegment childlist(MemorySegment struct) {
        return struct.get(childlist$LAYOUT, childlist$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct potrace_path_s *childlist
     * }
     */
    public static void childlist(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(childlist$LAYOUT, childlist$OFFSET, fieldValue);
    }

    private static final AddressLayout sibling$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("sibling"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct potrace_path_s *sibling
     * }
     */
    public static final AddressLayout sibling$layout() {
        return sibling$LAYOUT;
    }

    private static final long sibling$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct potrace_path_s *sibling
     * }
     */
    public static final long sibling$offset() {
        return sibling$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct potrace_path_s *sibling
     * }
     */
    public static MemorySegment sibling(MemorySegment struct) {
        return struct.get(sibling$LAYOUT, sibling$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct potrace_path_s *sibling
     * }
     */
    public static void sibling(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(sibling$LAYOUT, sibling$OFFSET, fieldValue);
    }

    private static final AddressLayout priv$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("priv"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct potrace_privpath_s *priv
     * }
     */
    public static final AddressLayout priv$layout() {
        return priv$LAYOUT;
    }

    private static final long priv$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct potrace_privpath_s *priv
     * }
     */
    public static final long priv$offset() {
        return priv$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct potrace_privpath_s *priv
     * }
     */
    public static MemorySegment priv(MemorySegment struct) {
        return struct.get(priv$LAYOUT, priv$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct potrace_privpath_s *priv
     * }
     */
    public static void priv(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(priv$LAYOUT, priv$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

