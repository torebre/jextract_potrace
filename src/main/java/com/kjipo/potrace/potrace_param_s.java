// Generated by jextract

package com.kjipo.potrace;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct potrace_param_s {
 *     int turdsize;
 *     int turnpolicy;
 *     double alphamax;
 *     int opticurve;
 *     double opttolerance;
 *     potrace_progress_t progress;
 * }
 * }
 */
public class potrace_param_s {

    potrace_param_s() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        potracelib_h.C_INT.withName("turdsize"),
        potracelib_h.C_INT.withName("turnpolicy"),
        potracelib_h.C_DOUBLE.withName("alphamax"),
        potracelib_h.C_INT.withName("opticurve"),
        MemoryLayout.paddingLayout(4),
        potracelib_h.C_DOUBLE.withName("opttolerance"),
        potrace_progress_s.layout().withName("progress")
    ).withName("potrace_param_s");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt turdsize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("turdsize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int turdsize
     * }
     */
    public static final OfInt turdsize$layout() {
        return turdsize$LAYOUT;
    }

    private static final long turdsize$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int turdsize
     * }
     */
    public static final long turdsize$offset() {
        return turdsize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int turdsize
     * }
     */
    public static int turdsize(MemorySegment struct) {
        return struct.get(turdsize$LAYOUT, turdsize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int turdsize
     * }
     */
    public static void turdsize(MemorySegment struct, int fieldValue) {
        struct.set(turdsize$LAYOUT, turdsize$OFFSET, fieldValue);
    }

    private static final OfInt turnpolicy$LAYOUT = (OfInt)$LAYOUT.select(groupElement("turnpolicy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int turnpolicy
     * }
     */
    public static final OfInt turnpolicy$layout() {
        return turnpolicy$LAYOUT;
    }

    private static final long turnpolicy$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int turnpolicy
     * }
     */
    public static final long turnpolicy$offset() {
        return turnpolicy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int turnpolicy
     * }
     */
    public static int turnpolicy(MemorySegment struct) {
        return struct.get(turnpolicy$LAYOUT, turnpolicy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int turnpolicy
     * }
     */
    public static void turnpolicy(MemorySegment struct, int fieldValue) {
        struct.set(turnpolicy$LAYOUT, turnpolicy$OFFSET, fieldValue);
    }

    private static final OfDouble alphamax$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("alphamax"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double alphamax
     * }
     */
    public static final OfDouble alphamax$layout() {
        return alphamax$LAYOUT;
    }

    private static final long alphamax$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double alphamax
     * }
     */
    public static final long alphamax$offset() {
        return alphamax$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double alphamax
     * }
     */
    public static double alphamax(MemorySegment struct) {
        return struct.get(alphamax$LAYOUT, alphamax$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double alphamax
     * }
     */
    public static void alphamax(MemorySegment struct, double fieldValue) {
        struct.set(alphamax$LAYOUT, alphamax$OFFSET, fieldValue);
    }

    private static final OfInt opticurve$LAYOUT = (OfInt)$LAYOUT.select(groupElement("opticurve"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int opticurve
     * }
     */
    public static final OfInt opticurve$layout() {
        return opticurve$LAYOUT;
    }

    private static final long opticurve$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int opticurve
     * }
     */
    public static final long opticurve$offset() {
        return opticurve$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int opticurve
     * }
     */
    public static int opticurve(MemorySegment struct) {
        return struct.get(opticurve$LAYOUT, opticurve$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int opticurve
     * }
     */
    public static void opticurve(MemorySegment struct, int fieldValue) {
        struct.set(opticurve$LAYOUT, opticurve$OFFSET, fieldValue);
    }

    private static final OfDouble opttolerance$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("opttolerance"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double opttolerance
     * }
     */
    public static final OfDouble opttolerance$layout() {
        return opttolerance$LAYOUT;
    }

    private static final long opttolerance$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double opttolerance
     * }
     */
    public static final long opttolerance$offset() {
        return opttolerance$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double opttolerance
     * }
     */
    public static double opttolerance(MemorySegment struct) {
        return struct.get(opttolerance$LAYOUT, opttolerance$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double opttolerance
     * }
     */
    public static void opttolerance(MemorySegment struct, double fieldValue) {
        struct.set(opttolerance$LAYOUT, opttolerance$OFFSET, fieldValue);
    }

    private static final GroupLayout progress$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("progress"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * potrace_progress_t progress
     * }
     */
    public static final GroupLayout progress$layout() {
        return progress$LAYOUT;
    }

    private static final long progress$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * potrace_progress_t progress
     * }
     */
    public static final long progress$offset() {
        return progress$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * potrace_progress_t progress
     * }
     */
    public static MemorySegment progress(MemorySegment struct) {
        return struct.asSlice(progress$OFFSET, progress$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * potrace_progress_t progress
     * }
     */
    public static void progress(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, progress$OFFSET, progress$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

