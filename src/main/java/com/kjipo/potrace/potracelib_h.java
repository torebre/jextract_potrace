// Generated by jextract

package com.kjipo.potrace;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class potracelib_h {

    potracelib_h() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
         String traceArgs = Arrays.stream(args)
                       .map(Object::toString)
                       .collect(Collectors.joining(", "));
         System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
            .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.libraryLookup("/usr/local/lib/libpotrace.so.0.0.6", LIBRARY_ARENA)
            .or(SymbolLookup.loaderLookup())
            .or(Linker.nativeLinker().defaultLookup());

    public static final OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final OfInt C_INT = ValueLayout.JAVA_INT;
    public static final OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(Long.MAX_VALUE, JAVA_BYTE));
    public static final OfLong C_LONG = ValueLayout.JAVA_LONG;
    private static final int POTRACE_TURNPOLICY_BLACK = (int)0L;
    /**
     * {@snippet lang=c :
     * #define POTRACE_TURNPOLICY_BLACK 0
     * }
     */
    public static int POTRACE_TURNPOLICY_BLACK() {
        return POTRACE_TURNPOLICY_BLACK;
    }
    private static final int POTRACE_TURNPOLICY_WHITE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define POTRACE_TURNPOLICY_WHITE 1
     * }
     */
    public static int POTRACE_TURNPOLICY_WHITE() {
        return POTRACE_TURNPOLICY_WHITE;
    }
    private static final int POTRACE_TURNPOLICY_LEFT = (int)2L;
    /**
     * {@snippet lang=c :
     * #define POTRACE_TURNPOLICY_LEFT 2
     * }
     */
    public static int POTRACE_TURNPOLICY_LEFT() {
        return POTRACE_TURNPOLICY_LEFT;
    }
    private static final int POTRACE_TURNPOLICY_RIGHT = (int)3L;
    /**
     * {@snippet lang=c :
     * #define POTRACE_TURNPOLICY_RIGHT 3
     * }
     */
    public static int POTRACE_TURNPOLICY_RIGHT() {
        return POTRACE_TURNPOLICY_RIGHT;
    }
    private static final int POTRACE_TURNPOLICY_MINORITY = (int)4L;
    /**
     * {@snippet lang=c :
     * #define POTRACE_TURNPOLICY_MINORITY 4
     * }
     */
    public static int POTRACE_TURNPOLICY_MINORITY() {
        return POTRACE_TURNPOLICY_MINORITY;
    }
    private static final int POTRACE_TURNPOLICY_MAJORITY = (int)5L;
    /**
     * {@snippet lang=c :
     * #define POTRACE_TURNPOLICY_MAJORITY 5
     * }
     */
    public static int POTRACE_TURNPOLICY_MAJORITY() {
        return POTRACE_TURNPOLICY_MAJORITY;
    }
    private static final int POTRACE_TURNPOLICY_RANDOM = (int)6L;
    /**
     * {@snippet lang=c :
     * #define POTRACE_TURNPOLICY_RANDOM 6
     * }
     */
    public static int POTRACE_TURNPOLICY_RANDOM() {
        return POTRACE_TURNPOLICY_RANDOM;
    }
    private static final int POTRACE_CURVETO = (int)1L;
    /**
     * {@snippet lang=c :
     * #define POTRACE_CURVETO 1
     * }
     */
    public static int POTRACE_CURVETO() {
        return POTRACE_CURVETO;
    }
    private static final int POTRACE_CORNER = (int)2L;
    /**
     * {@snippet lang=c :
     * #define POTRACE_CORNER 2
     * }
     */
    public static int POTRACE_CORNER() {
        return POTRACE_CORNER;
    }
    private static final int POTRACE_STATUS_OK = (int)0L;
    /**
     * {@snippet lang=c :
     * #define POTRACE_STATUS_OK 0
     * }
     */
    public static int POTRACE_STATUS_OK() {
        return POTRACE_STATUS_OK;
    }
    private static final int POTRACE_STATUS_INCOMPLETE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define POTRACE_STATUS_INCOMPLETE 1
     * }
     */
    public static int POTRACE_STATUS_INCOMPLETE() {
        return POTRACE_STATUS_INCOMPLETE;
    }
    /**
     * {@snippet lang=c :
     * typedef unsigned long potrace_word
     * }
     */
    public static final OfLong potrace_word = potracelib_h.C_LONG;

    private static class potrace_param_default {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            potracelib_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    potracelib_h.findOrThrow("potrace_param_default"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * potrace_param_t *potrace_param_default(void)
     * }
     */
    public static FunctionDescriptor potrace_param_default$descriptor() {
        return potrace_param_default.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * potrace_param_t *potrace_param_default(void)
     * }
     */
    public static MethodHandle potrace_param_default$handle() {
        return potrace_param_default.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * potrace_param_t *potrace_param_default(void)
     * }
     */
    public static MemorySegment potrace_param_default() {
        var mh$ = potrace_param_default.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("potrace_param_default");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class potrace_param_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            potracelib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    potracelib_h.findOrThrow("potrace_param_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void potrace_param_free(potrace_param_t *p)
     * }
     */
    public static FunctionDescriptor potrace_param_free$descriptor() {
        return potrace_param_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void potrace_param_free(potrace_param_t *p)
     * }
     */
    public static MethodHandle potrace_param_free$handle() {
        return potrace_param_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void potrace_param_free(potrace_param_t *p)
     * }
     */
    public static void potrace_param_free(MemorySegment p) {
        var mh$ = potrace_param_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("potrace_param_free", p);
            }
            mh$.invokeExact(p);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class potrace_trace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            potracelib_h.C_POINTER,
            potracelib_h.C_POINTER,
            potracelib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    potracelib_h.findOrThrow("potrace_trace"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * potrace_state_t *potrace_trace(const potrace_param_t *param, const potrace_bitmap_t *bm)
     * }
     */
    public static FunctionDescriptor potrace_trace$descriptor() {
        return potrace_trace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * potrace_state_t *potrace_trace(const potrace_param_t *param, const potrace_bitmap_t *bm)
     * }
     */
    public static MethodHandle potrace_trace$handle() {
        return potrace_trace.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * potrace_state_t *potrace_trace(const potrace_param_t *param, const potrace_bitmap_t *bm)
     * }
     */
    public static MemorySegment potrace_trace(MemorySegment param, MemorySegment bm) {
        var mh$ = potrace_trace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("potrace_trace", param, bm);
            }
            return (MemorySegment)mh$.invokeExact(param, bm);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class potrace_state_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            potracelib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    potracelib_h.findOrThrow("potrace_state_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void potrace_state_free(potrace_state_t *st)
     * }
     */
    public static FunctionDescriptor potrace_state_free$descriptor() {
        return potrace_state_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void potrace_state_free(potrace_state_t *st)
     * }
     */
    public static MethodHandle potrace_state_free$handle() {
        return potrace_state_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void potrace_state_free(potrace_state_t *st)
     * }
     */
    public static void potrace_state_free(MemorySegment st) {
        var mh$ = potrace_state_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("potrace_state_free", st);
            }
            mh$.invokeExact(st);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class potrace_version {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            potracelib_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    potracelib_h.findOrThrow("potrace_version"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *potrace_version(void)
     * }
     */
    public static FunctionDescriptor potrace_version$descriptor() {
        return potrace_version.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *potrace_version(void)
     * }
     */
    public static MethodHandle potrace_version$handle() {
        return potrace_version.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *potrace_version(void)
     * }
     */
    public static MemorySegment potrace_version() {
        var mh$ = potrace_version.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("potrace_version");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
}

