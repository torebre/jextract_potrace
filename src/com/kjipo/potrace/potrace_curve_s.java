// Generated by jextract

package com.kjipo.potrace;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct potrace_curve_s {
 *     int n;
 *     int *tag;
 *     potrace_dpoint_t (*c)[3];
 * }
 * }
 */
public class potrace_curve_s {

    potrace_curve_s() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        potracelib_h.C_INT.withName("n"),
        MemoryLayout.paddingLayout(4),
        potracelib_h.C_POINTER.withName("tag"),
        potracelib_h.C_POINTER.withName("c")
    ).withName("potrace_curve_s");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt n$LAYOUT = (OfInt)$LAYOUT.select(groupElement("n"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int n
     * }
     */
    public static final OfInt n$layout() {
        return n$LAYOUT;
    }

    private static final long n$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int n
     * }
     */
    public static final long n$offset() {
        return n$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int n
     * }
     */
    public static int n(MemorySegment struct) {
        return struct.get(n$LAYOUT, n$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int n
     * }
     */
    public static void n(MemorySegment struct, int fieldValue) {
        struct.set(n$LAYOUT, n$OFFSET, fieldValue);
    }

    private static final AddressLayout tag$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("tag"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int *tag
     * }
     */
    public static final AddressLayout tag$layout() {
        return tag$LAYOUT;
    }

    private static final long tag$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int *tag
     * }
     */
    public static final long tag$offset() {
        return tag$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int *tag
     * }
     */
    public static MemorySegment tag(MemorySegment struct) {
        return struct.get(tag$LAYOUT, tag$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int *tag
     * }
     */
    public static void tag(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(tag$LAYOUT, tag$OFFSET, fieldValue);
    }

    private static final AddressLayout c$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("c"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * potrace_dpoint_t (*c)[3]
     * }
     */
    public static final AddressLayout c$layout() {
        return c$LAYOUT;
    }

    private static final long c$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * potrace_dpoint_t (*c)[3]
     * }
     */
    public static final long c$offset() {
        return c$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * potrace_dpoint_t (*c)[3]
     * }
     */
    public static MemorySegment c(MemorySegment struct) {
        return struct.get(c$LAYOUT, c$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * potrace_dpoint_t (*c)[3]
     * }
     */
    public static void c(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(c$LAYOUT, c$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

